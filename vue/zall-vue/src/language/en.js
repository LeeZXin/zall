export default {
    app: "ZALL",
    logoutText: "logout",
    footer: "build with zsf",
    team: {
        createTeam: "Create team",
        myTeam: "My Team",
        joinNoTeam: "You join no team",
        name: "Team name",
        save: "Save now",
        nameFormatErr: "Team name format is wrong"
    },
    switchTeam: "switch team",
    notFound: "The page is lost",
    backToIndex: "Back to index page",
    noData: "No data found",
    superAdmin: "Super Admin",
    ztable: {
        noDataText: "No data found",
    },
    switchEnv: "Switch Environment",
    operationSuccess: "Successfully",
    operationFail: "Failed",
    appMenu: {
        propertyFile: "Property file",
        deployPipeline: "Deploy pipeline",
        deployPlan: "Deploy plan",
        serviceStatus: "Service status",
        registryCenter: "Registry center",
        artifacts: "Artifacts",
        promScrape: "Prom Scrape",
        alertConfig: "Alert config",
        setting: "Setting"
    },
    gitRepoMenu: {
        index: "Repo code",
        pullRequest: "PullRequest",
        branch: "Branch",
        tag: "Tag",
        commitHistory: "Commit history",
        workflow: "Workflow",
        protectedBranch: "Protected branch",
        webhook: "Webhook",
        setting: "Setting"
    },
    indexMenu: {
        team: "Team Collaborate",
        mysqlAudit: "Mysql Audit"
    },
    mysqlAuditMenu: {
        databaseSource: "Database source",
        readPermApply: "Apply read perm",
        readPermAudit: "Audit read perm",
        readPermList: "Read perm List",
        readPermManage: "Manage read perm",
        dataUpdateApply: "Apply data update",
        dataUpdateAudit: "Audit data update",
        dataSearch: "Search data"
    },
    personalSettingMenu: {
        profile: "Profile",
        changePassword: "Change password",
        sshAndGpg: "SSH&GPG"
    },
    saMenu: {
        sysCfg: "System config",
        userManage: "Manage users",
        propertyCenterSource: "Property source",
        serviceStatusSource: "Service source",
        registryCenterSource: "Registry source",
        zallet: "Zallet",
        promScrape: "Prom scrape"
    },
    system: {
        requestFailed: "something wrong happened, please retry in a while",
        notLogin: "you do not login, will back to login page",
        request404: "can not find request, please retry in a while",
        request403: "you are unauthorized to access",
        request400: "bad request, check your request",
        internalError: "internal error"
    },
    login: {
        title: "Login",
        accountPlaceholder: "please input account",
        passwordPlaceholder: "please input password",
        loginBtnText: "Login Now",
        registerText: "Register account",
        pleaseConfirmAccount: "account length should should between 4 and 32",
        pleaseConfirmPassword: "password length should greater than 5"
    },
    register: {
        title: "Register",
        accountPlaceholder: "please input account",
        passwordPlaceholder: "please input password",
        usernamePlaceholder: "please input username",
        emailPlaceholder: "please input email",
        confirmPasswordPlaceholder: "please confirm password",
        registerBtnText: "Register Now",
        backToLoginText: "Back to login",
        pleaseConfirmAccount: "account length should should between 4 and 32",
        pleaseConfirmPassword: "password length should greater than 5",
        pleaseConfirmUsername: "username length should should between 0 and 32",
        pleaseConfirmEmail: "email length should greater than 0",
        pleaseConfirmConfirmPassword: "confirm password should be equal with password"
    },
    teamMenu: {
        gitRepo: "Git repo",
        app: "App service",
        action: "Action",
        propertyCenter: "Property center",
        timer: "Timer task",
        dbAudit: "Database audit",
        promScrape: "Prometheus scrape",
        roleAndMembers: "Role&Member",
        setting: "Team setting",
        notifyTpl: "Notification",
        teamHook: "Team hook",
        weworkAccessToken: "Wework token",
        feishuAccessToken: "Feishu token"
    },
    teamRole: {
        createRole: "Create role",
        updateRole: "Update role",
        members: "Members",
        name: "Role name",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        addUser: "Add Member",
        changeRole: "Change role",
        selectUser: "Select member",
        selectRole: "Select role",
        account: "Account",
        userName: "Name",
        roleName: "Role",
        pleaseSelectRole: "Please select role",
        pleaseSelectUser: "Please select member",
        teamPerm: "Team permission",
        repoPermOption: "Repository permission option",
        useDefaultRepoPerm: "Use default repository permission",
        useDefaultRepoPermDesc: "All repositories use same permission",
        useSpecificRepoPerm: "Use specific repository permission",
        useSpecificRepoPermDesc: "Different repositories have different permission",
        defaultRepoPerm: "Default repository permission",
        specificRepoPerm: "Specific repository permission",
        permItem: "items",
        addRepoPerm: "Add repository permission",
        appPermOption: "Application permission option",
        useDefaultAppPerm: "Use default application permission",
        useDefaultAppPermDesc: "All applications use same permission",
        useSpecificAppPerm: "Use specific application permission",
        useSpecificAppPermDesc: "Different applications have different permission",
        specificAppPerm: "Speific application permission",
        addAppPerm: "Add application permission",
        save: "Save now",
        selectMultipleRepo: "Select multiple repositories",
        updateRepoPerm: "Update repository permission",
        delete: "Delete",
        ok: "Ok",
        repo: "Repository",
        selectMultipleApp: "Select multiple application",
        updateAppPerm: "Update application permission",
        app: "Application",
        canDevelopApp: "Develop application",
        canDevelopAppDesc: "if permitted, you can view application, view service status and etc",
        canCreateDeployPlan: "Create deploy plan",
        canCreateDeployPlanDesc: "if permitted, you can create deploy plan to deploy your application service",
        canManagePipeline: "Manage deploy pipeline",
        canManagePipelineDesc: "if permitted, you can manage deploy pipeline",
        canManageDiscoverySource: "Manage discovery source",
        canManageDiscoverySourceDesc: "if permitted, you can bind or unbind application with discovery source",
        canManagePropertySource: "Manage property source",
        canManagePropertySourceDesc: "if permitted, you can bind or unbind application with property source",
        canDeployProperty: "Deploy property",
        canDeployPropertyDesc: "if permitted, you can deploy property to source",
        canManageServiceSource: "Manage service source",
        canManageServiceSourceDesc: "if permitted, you can bind or unbind application with service source",
        canManageTimer: "Manage timer",
        canManageTimerDesc: "if permitted, you can view, create, update, delete, trigger timer and etc",
        canManageNotifyTpl: "Manage notification template",
        canManageNotifyTplDesc: "if permitted, you can view, create, update, delete notification template and etc",
        canManageTeamHook: "Manage Team Hook",
        canManageTeamHookDesc: "if permitted, you can view, create, update, delete team hook and etc",
        canManagePromScrape: "Manage prometheus scrape task",
        canManagePromScrapeDesc: "if permitted, you can view, create, update, delete prometheus scrape task and etc",
        canManageWeworkAccessToken: "Manage 企微 access token",
        canManageWeworkAccessTokenDesc: "if permitted, you can view, create, update, delete 企微 access token and etc",
        canManageFeishuAccessToken: "Manage 飞书 access token",
        canManageFeishuAccessTokenDesc: "if permitted, you can view, create, update, delete 飞书 access token and etc",
        codePerm: "Code permission",
        canAccessRepo: "Access, pull code",
        canAccessRepoDesc: "if permitted, you have read permission of the repository",
        canPushRepo: "Push code",
        canPushRepoDesc: "if permitted, you have write permission of the repository",
        pullRequestPerm: "Pull request permission",
        canSubmitPullRequest: "Submit pull request",
        canSubmitPullRequestDesc: "if permitted, you can submit pull request",
        canAddCommentInPullRequest: "Add comment in pull request",
        canAddCommentInPullRequestDesc: "if permitted, you can add comment in pull request",
        workflowPerm: "Workflow permission",
        canManageWorkflow: "Manage workflow",
        canManageWorkflowDesc: "if permitted, you can view, create, delete, update workflow",
        canTriggerWorkflow: "Trigger workflow",
        canTriggerWorkflowDesc: "if permitted, you can manually trigger workflow",
        webhookPerm: "Webhook permission",
        canManageWebhook: "Manage webhook",
        canManageWebhookDesc: "if permitted, you can view, create, delete, update webhook",
        protectedBranchPerm: "Protected branch permission",
        canManageProtectedBranch: "Manage protected branch",
        canManageProtectedBranchDesc: "if permitted, you can view, create, delete, update protected branch",
        roleNameFormatErr: "Role name format is wrong"
    },
    gitRepo: {
        searchText: "Search Repository",
        createRepoText: "Create Repository",
        switchRepo: "Switch Repository"
    },
    appService: {
        switchApp: "Switch App",
        searchApp: "Search app",
        createApp: "Create app service",
        viewApp: "View",
        appId: "AppId",
        name: "Name",
        operation: "Operation"
    },
    createGitRepo: {
        backToRepoList: "Back to Git repo list",
        createText: "Create a new Repository",
        starText: "Item marked with * is required",
        owner: "Owner",
        team: "Team",
        storeNode: "Storage node",
        repoName: "Repository name* (excluding special characters, the length must not exceed 32)",
        repoDesc: "Description(add brief description for your repository, the length must not exceed 255)",
        gitignore: "Gitignore template(let git ignores some files)",
        defaultBranch: "Default branch(the length must not exceed 32)",
        addReadme: "Add Readme",
        createBtn: "Create"
    },
    createTeam: {
        teamName: "Team name* (excluding special characters, the length must not exceed 32)"
    },
    workflow: {
        manualTriggerType: "Manual",
        hookTriggerType: "Automatic",
        status: {
            success: "Successful",
            fail: "Failed",
            cancel: "Cancelled",
            timeout: "Timeout",
            running: "Running",
            queue: "Queued",
            unknown: "Unknown",
            unExecuted: "UnExecuted"
        }
    },
    secondBefore: " second ago",
    minuteBefore: " minute ago",
    hourBefore: " hour ago",
    dayBefore: " day ago",
    monthBefore: " month ago",
    yearBefore: " year ago",
    yes: "Yes",
    no: "No",
    timerTask: {
        autoTriggerType: "Automatically",
        manualTriggerType: "Manually",
        successful: "Success",
        failed: "Failed",
        logColumns: {
            triggerBy: "Trigger by",
            triggerType: "Type",
            isSuccess: "Status",
            created: "Execute Time",
            operation: "Operation"
        },
        viewErrLog: "View Error Log",
        viewTaskCfg: "View Configuration",
        errLog: "Error Log",
        taskCfg: "Task Configuration",
        searchMonthly: "Search monthly",
        searchName: "Search name",
        createTimer: "Create timer task",
        updateTimer: "Update timer task",
        triggerTimer: "Trigger timer task",
        viewLog: "View log",
        name: "Name",
        cronExp: "Cron expression",
        creator: "Creator",
        isEnabled: "Enabled",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        confirmTrigger: "Do you confirm to trigger",
        taskType: "Task type",
        selectEnv: "Select environment",
        selectedEnv: "Selected environment",
        httpTaskDesc: "Timer task will send http request",
        httpTaskCfg: "Http task configuration",
        newHttpHeader: "New header",
        save: "Save now",
        reloadLog: "Reload"
    },
    deployPlan: {
        pendingStatus: "Pending",
        runningStatus: "Running",
        successfulStatus: "Success",
        closedStatus: "Close",
        createPlan: "Create plan",
        closePlan: "Close plan",
        viewPlan: "View plan",
        name: "Plan name",
        artifactVersion: "Artifact version",
        pipelineName: "Pipeline name",
        planStatus: "Status",
        createTime: "Create time",
        creator: "Creator",
        operation: "Operation",
        confirmClose: "Do you confirm to close",
        pipelineCfg: "Pipeline configuration",
        viewPipelineCfg: "View",
        startPlan: "Start deploy plan",
        automaticPeriod: "Automatic period",
        interactivePeriod: "Interactive period",
        waitForInteraction: "Wait for interaction",
        running: "Running",
        hasErr: "Error",
        stop: "Stop",
        forcefullyReExecuteUnsuccessfulTask: "Forcefully re-execute unsuccessful task",
        stagePendingStatus: "Pending",
        stageRunningStatus: "Running",
        stageSuccessfulStatus: "Success",
        stageFailedStatus: "Fail",
        agent: "Agent",
        host: "Host",
        stageStatus: "Status",
        executeLog: "Log",
        redo: "Re-do",
        confirmForcefullyRedo: "Do you confirm to forcefully redo the task",
        confirmStartPlan: "Do you confirm to start plan",
        confirmKillStage: "Do you confirm to interupt this stage",
        confirmRedo: "Do you confirm to redo",
        wrongFormat: "has wrong format",
        selectEnv: "Select environment",
        selectPipeline: "Select pipeline",
        selectArtifact: "Select artifact",
        save: "Save now",
        nameFormatErr: "Plan name format is wrong",
        pleaseSelectPipeline: "Please select pipeline",
        pleaseSelectArtifact: "Please select artifact"
    },
    mysqlReadPermApply: {
        pendingStatus: "Pending",
        agreeStatus: "Agree",
        disagreeStatus: "Disagree",
        canceledStatus: "Canceled",
        unknownStatus: "Unknown",
        applyReadPerm: "Apply for mysql read permission",
        cancelApply: "Cancel",
        dbName: "Name",
        accessBase: "Access base",
        accessTables: "Access tables",
        expireDay: "Expire day",
        applyStatus: "Status",
        applyReason: "Reason",
        applyTime: "Application time",
        operation: "Operation",
        auditor: "Auditor",
        auditTime: "Audit time",
        disagreeReason: "Disagree Reason",
        cancelTime: "Cancel time",
        confirmCancel: "Do you confirm to cancel",
        title: "Apply for read permission",
        selectHost: "Select host",
        fillAccessBaseName: "Fill access base name",
        fillAccessTablesName: "Fill access tables",
        accessTablesDesc: "using * to apply for all tables from access base or sperating multiple specific tables by ;",
        oneDay: "One day",
        oneMonth: "One month",
        threeMonth: "Three month",
        sixMonth: "Six month",
        oneYear: "One year",
        fillApplyReason: "Fill reason for application",
        apply: "Apply now",
        accessBaseFormatErr: "Access base format is wrong",
        accessTablesFormatErr: "Access tables format is wrong",
        applyReasonFormatErr: "Reason format is wrong",
        pleaseSelectDatabse: "Please select database",
        allDatabases: "All databases",
        account: "Applicant",
        agree: "Agree",
        disagree: "Disagree",
        confirmAgree: "Do you confirm to agree",
        fillDisagreeReason: "Fill disagree reason",
        disagreeReasonFormatErr: "Disagree reason format is wrong",
        effectiveTime: "Effective time",
        expireTime: "Expire time",
        viewApprovalForm: "View Approval Form",
        approvalForm: "Approval Form",
        confirmDelete: "Do you confirm to delete",
    },
    mysqlDataUpdateApply: {
        title: "Apply for data update",
        selectHost: "Select host",
        fillAccessBaseName: "Fill access base name",
        fillApplyReason: "Fill reason for application",
        fillSql: "Fill sql",
        executeImmediatelyAfterApproval: "Execute immediately after approval",
        apply: "Apply now",
        pendingStatus: "Pending",
        agreeStatus: "Agree",
        disagreeStatus: "Disagree",
        canceledStatus: "Canceled",
        askToExecuteStatus: "Ask To Execute",
        executedStatus: "Executed",
        unknownStatus: "Unknown",
        yes: "Yes",
        no: "No",
        cancel: "Cancel",
        viewExplain: "View explain",
        viewSql: "View sql",
        viewLog: "View log",
        askToExecute: "Ask to execute",
        dbName: "Database",
        accessBase: "Access base",
        applyStatus: "Status",
        applyReason: "Reason",
        executeImmediatelyAfterApprovalCol: "Execute immediately after approval",
        created: "Application time",
        account: "Applicant",
        operation: "Operation",
        auditor: "Auditor",
        auditTime: "Audit time",
        disagreeReason: "Disagree reason",
        cancelTime: "Cancel time",
        applyTime: "Application time",
        executor: "Executor",
        executeTime: "Execute time",
        accessBaseFormatErr: "Access base format is wrong",
        sqlFormatErr: "Sql format is wrong",
        applyReasonFormatErr: "Reason format is wrong",
        disagreeReasonFormatErr: "Disagree reason format is wrong",
        confirmCancel: "Do you confirm to cancel",
        confirmAskToExecute: "Do you confirm to ask to execute",
        confirmAgree: "Do you confirm to agree",
        confirmExecute: "Do you confirm to execute",
        agree: "Agree",
        disagree: "Disagree",
        allDatabases: "All databases",
        executeApply: "Execute",
        fillDisagreeReason: "Fill disagree reason",
        pleaseSelectDatabse: "Please select database"
    },
    mysqlSource: {
        searchPlaceholder: "Search source",
        createSource: "Create source",
        updateSource: "Update source",
        name: "Name",
        writeHost: "Write Host",
        readHost: "Read Host",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        host: "Host",
        username: "Mysql username",
        password: "Mysql password",
        hostFormat: "fill mysql host in ip:port format",
        save: "Save now",
        nameFormatErr: "Name format is wrong",
        writeHostFormatErr: "write host format is wrong",
        writeUsernameFormatErr: "write host username format is wrong",
        readHostFormatErr: "read host format is wrong",
        readUsernameFormatErr: "write host username format is wrong"
    },
    mysqlSearch: {
        duration: "Duration",
        search: "Search",
        explain: "Explain",
        export: "Export Result",
        createTableSql: "Create table sql",
        index: "Index"
    },
    propertyFile: {
        createFile: "Create property file",
        manageSource: "Manage property source",
        bindSource: "Bind property source",
        historyList: "History version",
        searchContent: "Search content",
        selectedFile: "File",
        env: "Env",
        selectEnv: "Select environment",
        selectedEnv: "Selected environment",
        selectedSource: "Source",
        searching: "Searching",
        version: "Version",
        content: "Content",
        name: "File",
        nameDesc: "The name is the unique identifier of the file and cannot contain special characters. It will be concatenated with the following format as a suffix. For example, if the format is selected as json, it will be saved as xxxname.json",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        pleaseSelectSource: "Please select source",
        lastVersion: "Followed version",
        created: "Create time",
        creator: "Creator",
        newVersion: "New version",
        compareLastVersion: "Compare with followed version",
        deployVersion: "Deploy version",
        deployRecord: "Deploy record",
        nodeName: "Node name",
        deployTime: "Deploy time",
        deployer: "Deployer",
        currentVersion: "Current version",
        deployNode: "Deploy nodes",
        compare: "Compare",
        deploy: "Deploy now",
        pleaseSelectNodes: "Please select nodes",
        format: "Format",
        save: "Save now",
        nameFormatErr: "Name format is wrong",
    },
    deployPipeline: {
        createPipeline: "Create pipeline",
        manageVars: "Manage variables",
        updatePipeline: "Update pipeline",
        name: "Name",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        selectEnv: "Select environment",
        selectedEnv: "Selected environment",
        yaml: "Yaml",
        formatYaml: "Format yaml",
        save: "Save now",
        nameFormatErr: "Name format is wrong",
        createVars: "Create variables",
        updateVars: "Update",
        deleteVars: "Delete",
        varsKey: "Key",
        varsContent: "Content",
        varsKeyDesc: "Key is used to uniquely identify variables, and its length must not exceed 32",
        varsKeyFormatErr: "Key format is wrong",
        varsContentFormatErr: "Content format is wrong"
    },
    serviceStatus: {
        manageSource: "Manage service source",
        view: "View",
        backToSelectSource: "Back to select source",
        bindSource: "Bind service source",
        selectedEnv: "Selected environment",
        source: "Service source",
        name: "Service source",
        operation: "Operation",
        host: "Host",
        status: "Status",
        cpuPercent: "CPU percent",
        memPercent: "Memory percent",
        confirm: "Do you confirm to"
    },
    discoveryService: {
        manageSource: "Manage discovery source",
        view: "View",
        backToSelectSource: "Back to select source",
        bindSource: "Bind service source",
        selectedEnv: "Selected environment",
        source: "Service source",
        name: "Discovery source",
        operation: "Operation",
        refresh: "Refresh",
        deregister: "Deregister",
        reRegister: "Re-register",
        deleteDownService: "Delete down service",
        serviceProtocol: "Protocol",
        serviceName: "Name",
        serivceHost: "Host",
        servicePort: "Port",
        serviceWeight: "Weight",
        serviceVersion: "Version",
        serviceRegion: "Region",
        serviceZone: "Zone",
        serviceUp: "Is up",
        confirmDeregister: "Do you confirm to deregister",
        confirmReRegister: "Do you confirm to re-register",
        confirmDelete: "Do you confirm to delete"
    },
    artifacts: {
        name: "Artifact version",
        creator: "Creator",
        created: "Create time",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete"
    },
    promScrape: {
        searchEndpoint: "Search endpoint",
        createScrape: "Create scrape task",
        updateScrape: "Update scrape task",
        discoveryType: "Discovery",
        hostType: "Host",
        target: "Target",
        targetType: "Target type",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        selectEnv: "Select environment",
        selectedEnv: "Selected environment",
        endpointDesc: "Agent will fetch diffrent targets according to its endpoint value",
        targetTypeDesc: "It will use reigstry center to discover service's hosts when choosing discovery type, and host type will be suggested with services which have fixed or rarely changed host",
        targetDesc: "Fill service appid when choosing discovery type, for example xxx-http. Or you can fill hosts in 'ip:port' format when choosing host type, sperate mutiple hosts by ';'",
        save: "Save now",
        endpointFormatErr: "endpoint format is wrong",
        targetFormatErr: "target format is wrong"
    },
    alertConfig: {
        createConfig: "Create alert config",
        updateConfig: "Update alert config",
        name: "Name",
        creator: "Creator",
        isEnabled: "Enabled",
        operation: "Operation",
        confirmDelete: "Do you confirm to delete",
        selectEnv: "Select environment",
        selectedEnv: "Selected environment",
        intervalSec: "Interval second",
        intervalSecDesc: "Automatically trigger detection at regular intervals, multiples of 10 in seconds, with a minimum of 10 and a maximum of 3600",
        hookType: "Hook type",
        webhook: "Webhook",
        notification: "Notification",
        hookUrl: "Hook url",
        hookSecret: "Hook secret",
        sourceType: "Source",
        mysql: "Mysql",
        prom: "Prometheus",
        loki: "Loki",
        http: "Http",
        tcp: "Tcp",
        mysqlHost: "Host",
        mysqlDatabase: "Database",
        mysqlUsername: "Username",
        mysqlPassword: "Password",
        mysqlSelectSql: "Select sql",
        mysqlCondition: "Alert condition",
        promHost: "Prometheus host",
        promQl: "PromQl",
        promCondition: "Alert condition",
        lokiHost: "Loki host",
        lokiOrgId: "X-Scope-OrgID",
        lokiLogQl: "LogQl",
        lokiLogQlDesc: "only support matrix result",
        lokiLastDuration: "Last duration",
        lokiLastDurationDesc: "From the past to the present, such as '1m', it represents one minute duration from the past to the present, it is not allowed to be greater than one hour",
        lokiStep: "Step",
        lokiStepDesc: "Numeric step in second unit, with a minimum of 1 and a maximum of 3600",
        lokiCondition: "Alert condition",
        httpGetUrl: "Get url",
        tcpHost: "Tcp host",
        save: "Save now",
        nameFormatErr: "Name format is wrong",
        pleaseFillIntervalSec: "Please fill interval second",
        hookUrlFormatErr: "Hook url format is wrong",
        hookSecretFormatErr: "Hook secret format is wrong",
        pleaseSelectTplId: "Please select notification template",
        mysqlHostFormatErr: "Mysql host format is wrong",
        pleaseFillMysqlDatabase: "Please fill mysql database",
        pleaseFillMysqlUsername: "Please fill mysql username",
        pleaseFillMysqlPassword: "Please fill mysql password",
        pleaseFillMysqlSelectSql: "Please fill mysql select sql",
        pleaseFillMysqlCondition: "Please fill mysql alert condition",
        promHostFormatErr: "Prometheus host format is wrong",
        pleaseFillPromQl: "Please fill promQl",
        pleaseFillPromCondition: "Please fill prometheus alert condition",
        lokiHostFormatErr: "Loki host format is wrong",
        pleaseFillLokiLogQl: "Please fill loki logQl",
        pleaseFillLokiLastDuration: "Please fill loki last duration",
        pleaseFillLokiStep: "Please fill loki step",
        pleaseFillLokiCondition: "Please fill loki alert condition",
        httpGetUrlFormatErr: "Http get url format is wrong",
        tcpHostFormatErr: "Tcp host format is wrong"
    },
    appSetting: {
        appName: "Application Name",
        saveAppName: "Save",
        dangerousAction: "Dangerous action",
        deleteApp: "Delete application",
        deleteAppDesc: "After deleting the application, the configuration, deployment pipeline, and related records related to the application will be deleted irreversibly",
        transferAppToOtherTeam: "Transfer application to other team",
        selectTeam: "Select team",
        pleaseSelectTeam: "Please select team",
        confirmDeleteApp: "Do you confirm to delete this app",
        appNameFormatErr: "Application name format is wrong"
    },
    teamSetting: {
        teamName: "Team name",
        saveTeamName: "Save",
        dangerousAction: "Dangerous action",
        deleteTeam: "Delete team",
        deleteTeamDesc: "Before deleting a team, the Git repository, application services, scheduled tasks, and other data associated with the team will be evaluated. If there is any associated data that has not been migrated, deletion will be prevented until the relevant repository, service, and other data are deleted or migrated to another team",
        confirmDeleteTeam: "Do you confirm to delete this team",
        teamNameFormatErr: "Team name format is wrong"
    }
}